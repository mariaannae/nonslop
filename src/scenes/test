// Add this property to your GameSceneEasy class constructor
constructor() {
    super({ key: 'GameSceneEasy' });
    this.llmEngine = null;
    this.userInput = '';
    this.inputText = null; 
    this.levelValue = 1;
    this.baseFontSize = 22;
    this.failCount = 0;
    this.autocompleteText = null; // Add this line
}

// Method to generate autocomplete suggestion
generateAutocomplete() {
    if (!this.aiSuggestedWords || this.aiSuggestedWords.length === 0) {
        return "";
    }
    
    // If last character is space or enter, show first suggestion
    const lastChar = this.userInput.slice(-1);
    if (lastChar === " " || lastChar === "\n") {
        return this.aiSuggestedWords[0];
    }
    
    // If user is typing a word, try to autocomplete it
    const words = this.userInput.split(" ");
    const currentWord = words[words.length - 1].toLowerCase();
    
    // If current word is empty, don't autocomplete
    if (!currentWord) {
        return "";
    }
    
    // Find a matching word from suggestions
    for (const suggestion of this.aiSuggestedWords) {
        if (suggestion.toLowerCase().startsWith(currentWord)) {
            // Return only the part that would complete the word
            return suggestion.slice(currentWord.length);
        }
    }
    
    return "";
}

// Enhanced createInputTextBox method
createInputTextBox() {
    const textBoxWidth = this.uiBoxWidth;
    const textBoxHeight = 240;
    const padding = 30; // margin in text box
    
    // Ensure prompt is updated before rendering
    this.updatePromptBasedOnLevel();
    
    // Display the prompt above the input box
    if (this.promptText) {
        this.promptText.destroy();
    }
    
    this.promptText = this.add.text(
        this.cameras.main.centerX,
        this.cameras.main.centerY - textBoxHeight / 2 - 25,
        this.currentPrompt || "Loading prompt...",
        {
            fontFamily: 'Nunito',
            fontSize: `${this.baseFontSize}px`,
            fontStyle: 'italic',
            fill: COLORS_TEXT.WHITE,
            wordWrap: { width: textBoxWidth - 30 },
            align: 'center'
        }
    ).setOrigin(0.5, 1);
    
    // Ensure text box exists and has rounded corners
    if (this.inputTextBorder) {
        this.inputTextBorder.destroy();
    }
    this.inputTextBorder = this.add.graphics();
    this.inputTextBorder.fillStyle(0xffffff, 1);
    this.inputTextBorder.fillRoundedRect(
        this.cameras.main.centerX - textBoxWidth / 2,
        this.cameras.main.centerY - textBoxHeight / 2,
        textBoxWidth,
        textBoxHeight,
        CORNER_RADIUS
    );
    this.inputTextBorder.lineStyle(OUTLINE_WIDTH, COLORS_HEX.MIDPURPLE, 1);
    this.inputTextBorder.strokeRoundedRect(
        this.cameras.main.centerX - textBoxWidth / 2,
        this.cameras.main.centerY - textBoxHeight / 2,
        textBoxWidth,
        textBoxHeight,
        CORNER_RADIUS
    );
    
    this.add.existing(this.inputTextBorder);
    
    // Clear existing text objects
    if (this.inputText) {
        this.inputText.destroy();
    }
    if (this.autocompleteText) {
        this.autocompleteText.destroy();
    }
    
    this.userInput = "";
    this.cursorVisible = true;
    
    // Create the main input text (black)
    this.inputText = this.add.text(
        this.cameras.main.centerX - textBoxWidth / 2 + padding,
        this.cameras.main.centerY - textBoxHeight / 2 + padding,
        "_",
        {
            fontFamily: "Nunito",
            fontSize: "20px",
            fill: "#000",
            wordWrap: { width: textBoxWidth - padding * 2 },
            align: "left"
        }
    ).setOrigin(0, 0);
    
    // Create the autocomplete text (red)
    this.autocompleteText = this.add.text(
        this.cameras.main.centerX - textBoxWidth / 2 + padding,
        this.cameras.main.centerY - textBoxHeight / 2 + padding,
        "",
        {
            fontFamily: "Nunito",
            fontSize: "20px",
            fill: "#ff0000", // Red color
            wordWrap: { width: textBoxWidth - padding * 2 },
            align: "left"
        }
    ).setOrigin(0, 0);
    
    // Set very high depth for both text objects to ensure visibility
    this.inputText.setDepth(25);
    this.autocompleteText.setDepth(25);
    
    // Force visibility
    this.inputText.setVisible(true);
    this.autocompleteText.setVisible(true);
    
    // Keyboard event handler
    this.input.keyboard.removeAllListeners('keydown'); // Prevent duplicate handlers
    this.input.keyboard.on("keydown", (event) => {
        this.inputActive = true;

        if(this.activeTimeout) {
            clearTimeout(this.activeTimeout);
        }

        // Set timeout to revert to inactive state after 3 seconds
        this.activeTimeout = setTimeout(() => {
            this.inputActive = false;
        }, 3000);

        if (event.key === " ") {
            if (!this.userInput.trim()) return;
            this.userInput += " ";
            // Check for AI-suggested word match
            this.checkAndExplodeWord();
            this.generateAISuggestions(this.userInput.trim());
        } else if (event.key === "Tab") {
            // Accept autocomplete suggestion
            event.preventDefault(); // Prevent default tab behavior
            const autocomplete = this.generateAutocomplete();
            if (autocomplete) {
                this.userInput += autocomplete;
                
                // If the autocomplete ended a word, add a space
                if (!this.userInput.endsWith(" ")) {
                    this.userInput += " ";
                }
                
                this.generateAISuggestions(this.userInput.trim());
            }
        } else if (event.key.length === 1) {
            this.userInput += event.key;
        } else if (event.key === "Backspace") {
            this.userInput = this.userInput.slice(0, -1);
        } else if (event.key === "Enter") {
            this.userInput += "\n";
            // Check for AI-suggested word match
            this.checkAndExplodeWord();
            this.generateAISuggestions(this.userInput.trim());
        }
        
        this.updateCursor();
    });
    
    // Cursor blinking timer
    if (this.cursorTimer) {
        this.cursorTimer.remove();
    }
    this.cursorTimer = this.time.addEvent({
        delay: 500,
        loop: true,
        callback: () => {
            this.cursorVisible = !this.cursorVisible;
            
            // If active, blink faster
            if (this.inputActive) {
                setTimeout(() => {
                    if (this.inputActive) {
                        this.cursorVisible = !this.cursorVisible;
                        this.updateCursor();
                    }
                }, 250); // Half-cycle for faster blink
            }
            
            this.updateCursor();
        }
    });

    // Initialize with cursor and autocomplete
    this.updateCursor();

    // Make the input box interactive
    this.inputTextBorder.setInteractive(
        new Phaser.Geom.Rectangle(
            this.cameras.main.centerX - this.uiBoxWidth / 2,
            this.cameras.main.centerY - 240 / 2,
            this.uiBoxWidth,
            240
        ),
        Phaser.Geom.Rectangle.Contains
    );

    // Add click/tap effect
    this.inputTextBorder.on('pointerdown', (pointer) => {
        // Create ripple effect at click position
        this.createInputBoxClickEffect(pointer.x, pointer.y);
    });
}

// Improved updateCursor method to display autocomplete
updateCursor() {
    if (!this.inputText || !this.autocompleteText) return;
    
    // Generate autocomplete suggestion
    let autocomplete = this.generateAutocomplete();
    
    // Update the main input text with cursor
    if (this.inputActive) {
        // Active state - block cursor
        this.inputText.setText(this.userInput + (this.cursorVisible ? "â–Œ" : " "));
    } else {
        // Default state - underscore cursor
        this.inputText.setText(this.userInput + (this.cursorVisible ? "_" : ""));
    }
    
    // Force a proper re-render of the text
    this.inputText.updateText();
    
    // Use the raw text width without the cursor for more accurate positioning
    const rawTextWidth = this.inputText.width - (this.cursorVisible ? 10 : 0);
    
    // Position autocomplete text immediately after input text content
    this.autocompleteText.setPosition(
        this.inputText.x + rawTextWidth,
        this.inputText.y
    );
    
    // Update the autocomplete text
    this.autocompleteText.setText(autocomplete || "");
    
    // Force redraw of autocomplete text
    this.autocompleteText.updateText();
    
    // Ensure both text objects are visible and at the correct depth
    this.inputText.setVisible(true).setDepth(25);
    this.autocompleteText.setVisible(true).setDepth(25);
}

// Improved createExplosionEffect to ensure visibility
createExplosionEffect(word, x, y) {
    // Calculate a better position for the explosion
    // Center of the text box horizontally, 1/4 of the height from the top
    const wordX = this.cameras.main.centerX;
    const wordY = this.cameras.main.centerY - 60; // Position above the center
    
    // Create explosion with high depth
    const explosion = this.add.text(wordX, wordY, word, {
        fontFamily: 'Nunito',
        fontSize: '20px', 
        fill: '#ff0000', 
        fontStyle: 'bold'
    }).setOrigin(0.5);
    
    // Set a very high depth to ensure it's on top of everything
    explosion.setDepth(100);
    
    // Make the explosion animation more dramatic
    this.tweens.add({
        targets: explosion,
        scale: { from: 1, to: 4 }, // How big is the explosion?
        alpha: { from: 1, to: 0 }, // Start fully visible and fade out
        angle: { from: 0, to: 360 }, // Rotation
        y: { from: wordY, to: wordY - 50 }, // Move upward for visibility
        duration: 900,
        ease: 'Back.easeOut',
        onComplete: () => explosion.destroy()
    });
}

// Updated clearInputTextBox method
clearInputTextBox() {
    this.userInput = '';
    if (this.inputText) {
        this.inputText.setText('_');
    }
    if (this.autocompleteText) {
        this.autocompleteText.setText('');
    }
}

// Updated checkAndExplodeWord method with better positioning
checkAndExplodeWord() {
    console.log("check and explode word");
    if (!this.aiSuggestedWords || this.aiSuggestedWords.length === 0) {
        return;
    }
    
    let words = this.userInput.trim().split(" ");
    let lastWord = words[words.length - 1];

    if (this.aiSuggestedWords.includes(lastWord)) {
        console.log(`Exploding word: ${lastWord}`);
        
        // Use the createExplosionEffect method that has the improved positioning
        this.createExplosionEffect(lastWord);
        
        // Shake screen
        this.shakeScreen();
        
        this.updateCursor();

        // Increment fail counter
        this.failCount++;
        this.updateFailsCounter();
    }
}

// Add this to your create method for debugging if needed
ensureTextVisibility() {
    if (this.inputText) {
        this.inputText.setVisible(true);
        this.inputText.setDepth(25);
    }
    if (this.autocompleteText) {
        this.autocompleteText.setVisible(true);
        this.autocompleteText.setDepth(25);
    }
}

// Update your create method to include the visibility check
async create() {
    // [existing code...]
    
    this.createMenuBar();
    if (!this.promptTextBox) {
        this.createPromptTextBox();
    }
    
    // Create input box
    this.createInputTextBox();
    this.updatePromptBasedOnLevel();
    
    // [rest of existing create method...]
    
    // Ensure all elements are properly visible
    this.ensureProperLayering();
    this.ensureTextVisibility(); // Add this new call
}